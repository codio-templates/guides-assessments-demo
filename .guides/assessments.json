[
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4179884427",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [
     "natural",
     "1",
     "1",
     "itself"
    ],
    "text": [
     "A prime number (or a prime) is a ",
     0,
     " number greater than ",
     0,
     " that has no positive divisors other than ",
     0,
     " and ",
     0,
     "."
    ]
   },
   "text": "A prime number (or a prime) is a <<<natural>>> number greater than <<<1>>> that has no positive divisors other than <<<1>>> and <<<itself>>>.",
   "showValues": true,
   "points": 1,
   "instructions": "Complete the definition.",
   "name": "Fill in the blanks (show possible values)"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-539535015",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [
     "natural",
     "1",
     "1",
     "itself"
    ],
    "text": [
     "A prime number (or a prime) is a ",
     0,
     " number greater than ",
     0,
     " that has no positive divisors other than ",
     0,
     " and ",
     0,
     "."
    ]
   },
   "text": "A prime number (or a prime) is a <<<natural>>> number greater than <<<1>>> that has no positive divisors other than <<<1>>> and <<<itself>>>.",
   "showValues": false,
   "points": 1,
   "instructions": "Complete the definition.",
   "name": "Fill in the blanks (hide possible values)"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3362447361",
  "source": {
   "name": "MCQ with Multiple Responses ",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "Correct Answer: **1** & **4**",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Which numbers are not primes?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": true,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "56e003bd40f757f006946549",
     "correct": true,
     "answer": "1"
    },
    {
     "_id": "56e003bd40f757f006946548",
     "correct": true,
     "answer": "4"
    },
    {
     "_id": "56e003bd40f757f006946547",
     "correct": false,
     "answer": "11"
    },
    {
     "_id": "56e003bd40f757f006946546",
     "correct": false,
     "answer": "37"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3851013076",
  "source": {
   "name": "MCQ with Single Response",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "Correct Answer: **1**",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Which number is not a prime?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "56e0037f89191cb269f5b60f",
     "correct": true,
     "answer": "1"
    },
    {
     "_id": "56e0037f89191cb269f5b60e",
     "correct": false,
     "answer": "2"
    },
    {
     "_id": "56e0037f89191cb269f5b60d",
     "correct": false,
     "answer": "11"
    }
   ]
  }
 },
 {
  "type": "test",
  "taskId": "test-1487677191",
  "source": {
   "name": "test2",
   "showName": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Write a program that receives two numeric arguments, a and b, and outputs a single string with the value (a + b).",
   "command": "challenge2/framework-test.sh",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-1883631226",
  "source": {
   "name": "Advanced Test (bash)",
   "showName": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Write a program that receives two numeric arguments, a and b, and outputs a single string with the value \"Hello World \" + (a + b).",
   "command": "challenge1/advanced-test.sh",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-3517184996",
  "source": {
   "name": "Unordered lists",
   "showName": true,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Create an unordered list with 3 list items.",
   "command": "node challenge4/test4.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-857809534",
  "source": {
   "name": "JavaScript test using Mocha",
   "showName": true,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "JavaScript's Array.indexOf method should return -1 if no value is supplied. Complete the expected behaviour.",
   "command": "mocha challenge3/test3.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-4112607060",
  "source": {
   "name": "test c with python",
   "showName": true,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Write a program that receives two numeric arguments, a and b, and outputs a single string with the value \"Hello World \" + (a + b).",
   "command": "python challenge5/test.py challenge5/challenge5.c",
   "points": 10
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2313277420",
  "source": {
   "name": "Standard (argument)",
   "showName": false,
   "preExecuteCommand": "javac challenge1/Challenge.java",
   "command": "java -classpath challenge1 Challenge",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "",
   "options": {
    "ignoreCase": false,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "1 4",
     "input": "",
     "output": "Hello World 5"
    },
    {
     "arguments": "99 100",
     "input": "",
     "output": "Hello World 199"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1758926380",
  "source": {
   "name": "Stdin",
   "showName": true,
   "preExecuteCommand": "javac stdin/AddNumbers.java",
   "command": "java -classpath stdin AddNumbers",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "When you have tested your code and are happy with it, press the button below.",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "1\n2",
     "output": "first number    :\nsecond number         :\ntotal:3.0"
    },
    {
     "arguments": "",
     "input": "1.456\n2",
     "output": "first number    :\nsecond number         :\ntotal:3.456"
    },
    {
     "arguments": "",
     "input": "100\n200",
     "output": "first number    :\nsecond number         :\ntotal:300.0"
    }
   ]
  }
 },
 {
  "type": "test",
  "taskId": "test-1592842204",
  "source": {
   "name": "Partial",
   "showName": false,
   "arePartialPointsAllowed": true,
   "oneTimeTest": false,
   "instructions": "Write some code that outputs a random number between 0 and 100. This is not really a valid test but a demo only to show how partial points works.",
   "command": "partial/partial-test.sh",
   "points": 10
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-432490137",
  "source": {
   "name": "Free Text Example",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": true,
   "oneTimeTest": false,
   "instructions": "Please describe in no more than 100 words the dangers of the **Dark Web**",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 20
  }
 },
 {
  "type": "math-stack",
  "taskId": "math-stack-3654758967",
  "source": {
   "name": "Question 1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "question": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quiz>\n<!-- question: 109  -->\n  <question type=\"stack\">\n    <name>\n      <text>Continuous non-differentiable function</text>\n    </name>\n    <questiontext format=\"html\">\n      <text><![CDATA[<p>Give an example of a function $f(x)$ with a stationary point at $x=@n@$ and which is continuous but not differentiable at $x=0$.</p>\n<p>$f(x)=$[[input:ans1]]</p>\n<div>[[validation:ans1]]</div>]]></text>\n    </questiontext>\n    <generalfeedback format=\"html\">\n      <text><![CDATA[<p>One way to construct such a function is to start with a continuous curve (the first property) with a stationary point at $x=@n@$ and then to \"bend\" the curve at the point at which we need differentiability to fail.  This can be done using the absolute value function $|x|$.</p>\n<p>We start with a quadratic with roots at $x=0$ and $x=2\\times @n@$ which has a stationary point at the required $x=@n@$.  For example $x(x-@2*n@)$.  Now we can \"bend\" it with the absolute value function as follows:</p>\n<p>\\[ @abs(x)*(x-2*n)@\\]</p>\n<p>This is plotted below. @plot(abs(x)*(x-2*n),[x,-2,2*(n+1)])@</p>]]></text>\n    </generalfeedback>\n    <defaultgrade>3.0000000</defaultgrade>\n    <penalty>0.1000000</penalty>\n    <hidden>0</hidden>\n    <questionvariables>\n      <text>n:rand([2,3,4])</text>\n    </questionvariables>\n    <specificfeedback format=\"html\">\n      <text><![CDATA[<p>[[feedback:prt1]]</p>]]></text>\n    </specificfeedback>\n    <questionnote>\n      <text>Point = @n@.  Answer is @abs(x)*(x-2*n)@</text>\n    </questionnote>\n    <questionsimplify>1</questionsimplify>\n    <assumepositive>0</assumepositive>\n    <prtcorrect format=\"html\">\n      <text><![CDATA[<p>Correct answer, well done.</p>]]></text>\n    </prtcorrect>\n    <prtpartiallycorrect format=\"html\">\n      <text><![CDATA[<p>Your answer is partially correct.</p>]]></text>\n    </prtpartiallycorrect>\n    <prtincorrect format=\"html\">\n      <text><![CDATA[<p>Incorrect answer.</p>]]></text>\n    </prtincorrect>\n    <multiplicationsign>dot</multiplicationsign>\n    <sqrtsign>1</sqrtsign>\n    <complexno>i</complexno>\n    <variantsselectionseed></variantsselectionseed>\n    <input>\n      <name>ans1</name>\n      <type>algebraic</type>\n      <tans>abs(x)*(x-2*n)</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>0</requirelowestterms>\n      <checkanswertype>0</checkanswertype>\n      <mustverify>1</mustverify>\n      <showvalidation>1</showvalidation>\n    </input>\n    <prt>\n      <name>prt1</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text></text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>subst(x=n,diff(ans1,x))</sans>\n        <tans>0</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.3400000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>1</truenextnode>\n        <trueanswernote>prt1-1-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>1</falsenextnode>\n        <falseanswernote>prt1-1-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer does not have a stationary point at $x=@n@$ but should do.</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>1</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>continuousp(ans1,x,0)</sans>\n        <tans>true</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.3300000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>2</truenextnode>\n        <trueanswernote>prt1-2-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>+</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>prt1-2-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer fails to be continuous at $x=0$ but should be.</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>2</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>diffp(ans1,x,0)</sans>\n        <tans>false</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.3300000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>prt1-3-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>+</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>prt1-3-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer is differentiable at $x=0$ but should not be!  You were asked for a non-differentiable function at $x=0$.  Consider using $|x|$, which is entered as <span style=\"font-family: 'courier new', courier, monospace;\">abs(x)</span> somewhere in your answer.</p>]]></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <deployedseed>47</deployedseed>\n    <deployedseed>1210578137</deployedseed>\n    <deployedseed>2053256376</deployedseed>\n    <qtest>\n      <testcase>1</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>abs(x)*(2*n-x)</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>prt1-3-T</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>2</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>x*(x-2*n)</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>0.6700000</expectedscore>\n        <expectedpenalty>0.1000000</expectedpenalty>\n        <expectedanswernote>prt1-3-F</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>3</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>x^2-n*x</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>0.3300000</expectedscore>\n        <expectedpenalty>0.1000000</expectedpenalty>\n        <expectedanswernote>prt1-3-F</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>4</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>abs(x)/x*(x*(x-2*n)+2)</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>0.3400000</expectedscore>\n        <expectedpenalty>0.1000000</expectedpenalty>\n        <expectedanswernote>prt1-2-F</expectedanswernote>\n      </expected>\n    </qtest>\n  </question>\n\n</quiz>",
   "points": "1",
   "learningObjectives": "",
   "oneTimeTest": false
  }
 },
 {
  "type": "math-stack",
  "taskId": "math-stack-2516492953",
  "source": {
   "name": "Question 2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "question": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quiz>\n<!-- question: 198  -->\n  <question type=\"stack\">\n    <name>\n      <text>Cubic spline</text>\n    </name>\n    <questiontext format=\"html\">\n      <text><![CDATA[<p>Consider the real function</p>\n<p>\\[ f(x) :=\\left\\{ \\begin{array}{ll} @f0@ &amp; \\mbox{for } x\\leq @x0@, \\\\ p(x) &amp; \\mbox{for } @x0@ &lt; x &lt; @x1@, \\\\ @f1@ &amp; \\mbox{for } @x1@\\leq x.\\end{array} \\right. \\]</p>\n<p>@plot(pg,[x,(x0-3),(x1+3)],[y,-3,3])@</p>\n<p>Find the cubic polynomial $p(x)$ which makes $f(x)$ continuously differentiable. </p>\n<p>$p(x)=$[[input:ans1]]</p>\n<div>[[validation:ans1]]</div>]]></text>\n    </questiontext>\n    <generalfeedback format=\"html\">\n      <text><![CDATA[<p>First we need to find the information which $p(x)$ needs to satisfy.  This is</p>\n<p>\\[ p(@x0@)=@subst(x=x0,f0)@.\\]</p>\n<p>\\[ p(@x1@)=@subst(x=x1,f1)@.\\]</p>\n<p>\\[ p'(@x0@)=@subst(x=x0,diff(f0,x))@.\\]</p>\n<p>\\[ p'(@x1@)=@subst(x=x1,diff(f1,x))@.\\]</p>\n<p>If we define $p(x)$ to be the cubic </p>\n<p>\\[ p(x) = a_3 x^3 + a_2 x^2 + a_1 x + a_0,\\]</p>\n<p>We then set up the matrix equation</p>\n<p>\\[ @CS@ @CV@ = @CT@ \\]</p>\n<p>Solving this gives the coefficients, from which we get the polynomial.</p>\n<p>@ta@.</p>]]></text>\n    </generalfeedback>\n    <defaultgrade>1.0000000</defaultgrade>\n    <penalty>0.0000000</penalty>\n    <hidden>0</hidden>\n    <questionvariables>\n      <text><![CDATA[x0 : -1;\nf0 : 1;\nx1 : 2;\nf1 : sin(%pi*x)\n/* Note, we should really use inf instead of 1000 here, but Maxima gives up plotting with the options used by STACK */\npg:if x<x0 then f0 else if x<x1 then 1000 else f1;\nCS:matrix([1,x0,x0^2,x0^3],[0,1,2*x0,3*x0^2],[1,x1,x1^2,x1^3],[0,1,2*x1,3*x1^2])\nCT:transpose(matrix([ev(f0,x=x0),subst(x=x0,diff(f0,x)),ev(f1,x=x1),subst(x=x1,diff(f1,x))]));\nCV:transpose(matrix([a0,a1,a2,a3]));\nCS2:invert(CS).CT;\nta : matrix([1,x,x^2,x^3]).CS2;\n]]></text>\n    </questionvariables>\n    <specificfeedback format=\"html\">\n      <text><![CDATA[<p>[[feedback:prt1]]</p>]]></text>\n    </specificfeedback>\n    <questionnote>\n      <text>@ta@</text>\n    </questionnote>\n    <questionsimplify>1</questionsimplify>\n    <assumepositive>0</assumepositive>\n    <prtcorrect format=\"html\">\n      <text><![CDATA[<p>Correct answer, well done.</p>]]></text>\n    </prtcorrect>\n    <prtpartiallycorrect format=\"html\">\n      <text><![CDATA[<p>Your answer is partially correct.</p>]]></text>\n    </prtpartiallycorrect>\n    <prtincorrect format=\"html\">\n      <text><![CDATA[<p>Incorrect answer.</p>]]></text>\n    </prtincorrect>\n    <multiplicationsign>dot</multiplicationsign>\n    <sqrtsign>1</sqrtsign>\n    <complexno>i</complexno>\n    <variantsselectionseed></variantsselectionseed>\n    <input>\n      <name>ans1</name>\n      <type>algebraic</type>\n      <tans>ta</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>0</requirelowestterms>\n      <checkanswertype>0</checkanswertype>\n      <mustverify>1</mustverify>\n      <showvalidation>1</showvalidation>\n    </input>\n    <prt>\n      <name>prt1</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text><![CDATA[anspt : if (x>x0 and x<x1) then ans1 else 1000;]]></text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>subst(x=x0,ans1)</sans>\n        <tans>subst(x=x0,f0)</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.2500000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>1</truenextnode>\n        <trueanswernote>prt1-1-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>1</falsenextnode>\n        <falseanswernote>prt1-1-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer does not satisfy $@p(x0)=subst(x=x0,f0)@$.</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>1</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>subst(x=x1,ans1)</sans>\n        <tans>subst(x=x1,f1)</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.2500000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>2</truenextnode>\n        <trueanswernote>prt1-2-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>+</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>2</falsenextnode>\n        <falseanswernote>prt1-2-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer does not satisfy $@p(x1)=subst(x=x1,f1)@$.</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>2</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>subst(x=x0,diff(ans1,x))</sans>\n        <tans>subst(x=x0,diff(f0,x))</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.2500000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>3</truenextnode>\n        <trueanswernote>prt1-3-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>+</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>3</falsenextnode>\n        <falseanswernote>prt1-3-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer does not satisfy $p'(@x0@)=@subst(x=x0,diff(f0,x))@$.</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>3</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>subst(x=x1,diff(ans1,x))</sans>\n        <tans>subst(x=x1,diff(f1,x))</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.2500000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>4</truenextnode>\n        <trueanswernote>prt1-4-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>+</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>4</falsenextnode>\n        <falseanswernote>prt1-4-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer does not satisfy $p'(@x1@)=@subst(x=x1,diff(f1,x))@$.</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>4</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>degree(ans1,x)</sans>\n        <tans>3</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>5</truenextnode>\n        <trueanswernote>prt1-5-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>5</falsenextnode>\n        <falseanswernote>prt1-5-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer is not a cubic!</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>5</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>ans1</sans>\n        <tans>ta</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>1.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>prt1-6-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>+</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>prt1-6-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer is plotted below, although part of your graph might appear out of range of the plot!</p>\n<p>@plot([pg,anspt],[x,(x0-3),(x1+3)],[y,-3,3])@</p>]]></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <qtest>\n      <testcase>1</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>ta</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>prt1-6-T</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>2</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>x^2</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>0.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>prt1-6-F</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>3</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>(2*%pi/9+2/27)*x^3-x^2/9+(-2*%pi/3-4/9)*x-4*%pi/9+20/27</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>0.7500000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>prt1-6-F</expectedanswernote>\n      </expected>\n    </qtest>\n  </question>\n\n</quiz>",
   "points": "1",
   "learningObjectives": "",
   "oneTimeTest": false
  }
 },
 {
  "type": "math-stack",
  "taskId": "math-stack-1118376393",
  "source": {
   "name": "Question 3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "question": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quiz>\n<!-- question: 10  -->\n  <question type=\"stack\">\n    <name>\n      <text>MCQ (shuffle)</text>\n    </name>\n    <questiontext format=\"html\">\n      <text><![CDATA[<p>Differentiate @p@ with respect to @x@.&nbsp;</p><p>[[input:ans1]]</p><div>[[validation:ans1]]</div>]]></text>\n    </questiontext>\n    <generalfeedback format=\"html\">\n      <text></text>\n    </generalfeedback>\n    <defaultgrade>1.0000000</defaultgrade>\n    <penalty>0.3000000</penalty>\n    <hidden>0</hidden>\n    <questionvariables>\n      <text><![CDATA[/* Create a list of potential answers. */\np:sin(2*x);\nta:[[diff(p,x),true],[p,false],[int(p,x),false],[cos(2*x)+c,false]];\n/* The actual correct answer.    */\ntac:diff(p,x)\n/* Randomly shuffle the list \"ta\". */\nta:random_permutation(ta);\n/* Add in a \"None of these\" to the end of the list.  The Maxima value is the atom null. */\ntao:[null, false, \"None of these\"];\nta:append(ta,[tao]);]]></text>\n    </questionvariables>\n    <specificfeedback format=\"html\">\n      <text>[[feedback:prt1]]</text>\n    </specificfeedback>\n    <questionnote>\n      <text>@maplist(first,ta)@.  Correct answer is @tac@.</text>\n    </questionnote>\n    <questionsimplify>1</questionsimplify>\n    <assumepositive>0</assumepositive>\n    <prtcorrect format=\"html\">\n      <text>Correct answer, well done.</text>\n    </prtcorrect>\n    <prtpartiallycorrect format=\"html\">\n      <text>Your answer is partially correct.</text>\n    </prtpartiallycorrect>\n    <prtincorrect format=\"html\">\n      <text>Incorrect answer.</text>\n    </prtincorrect>\n    <multiplicationsign>dot</multiplicationsign>\n    <sqrtsign>1</sqrtsign>\n    <complexno>i</complexno>\n    <inversetrig>cos-1</inversetrig>\n    <matrixparens>[</matrixparens>\n    <variantsselectionseed></variantsselectionseed>\n    <input>\n      <name>ans1</name>\n      <type>radio</type>\n      <tans>ta</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <allowwords></allowwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>0</requirelowestterms>\n      <checkanswertype>0</checkanswertype>\n      <mustverify>0</mustverify>\n      <showvalidation>0</showvalidation>\n      <options>latex</options>\n    </input>\n    <prt>\n      <name>prt1</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text></text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>Diff</answertest>\n        <sans>ans1</sans>\n        <tans>diff(p,x)</tans>\n        <testoptions>x</testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>1.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>prt1-1-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>prt1-1-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <qtest>\n      <testcase>1</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>2*cos(2*x)</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>prt1-1-T</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>2</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>cos(2*x)+c</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>0.0000000</expectedscore>\n        <expectedpenalty>0.3000000</expectedpenalty>\n        <expectedanswernote>prt1-1-F</expectedanswernote>\n      </expected>\n    </qtest>\n  </question>\n\n<!-- question: 9  -->\n  <question type=\"stack\">\n    <name>\n      <text>Multi-part-MCQ-algebraic</text>\n    </name>\n    <questiontext format=\"html\">\n      <text><![CDATA[Which method do you need to integrate @p@ with respect to \\(x\\)?&nbsp;<p>[[input:ans1]] [[validation:ans1]]<span style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 20px; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none; background-color: rgb(255, 255, 255);\">[[feedback:prt1]]</span></p><p>Find the value of this integral: [[input:ans2]] [[validation:ans2]]&nbsp;<span style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 20px; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none; background-color: rgb(255, 255, 255);\">[[feedback:prt2]]</span></p>]]></text>\n    </questiontext>\n    <generalfeedback format=\"html\">\n      <text><![CDATA[<p>(a) Let \\(u=\\sin(t)\\) so that \\(u'=\\cos(t)\\).  Hence\n\\[ \\int u \\frac{\\mathrm{d}u}{\\mathrm{d}t} \\mathrm{d}t = \\int u \\mathrm{d}u = \\frac{1}{2}u^2+c = \\frac{1}{2} \\sin^2(t)+c.\\]</p>\n<p>(b) Integrating by parts, let \\(I=\\int \\sin(t)\\cos(t)\\mathrm{d}t\\), then \\[ I = \\sin^2(t) - \\int\\cos(t)\\sin(t)\\mathrm{d}t + c'\\] hence \\( 2I = \\sin^2(t) +c'\\), or \\[ \\int \\sin(t)\\cos(t)\\mathrm{d}t = \\frac{1}{2}\\sin^2(t)+\\frac{c'}{2}.\\]</p>\n<p>(c) Using \\(\\cos(t)\\sin(t)=\\frac{1}{2}\\sin(2t)\\) we have\n\\[ \\int \\sin(t)\\cos(t)\\mathrm{d}t\n = \\int \\frac{1}{2}\\sin(2t)\\mathrm{d}t\n\\]\n\\[ = -\\frac{1}{4}\\cos(2t)+c''\n = \\frac{1}{2} \\sin^2(t)-\\frac{1}{2}+c'',\n\\]\nusing \\(\\cos(2t) = 1-2\\sin^2(t)\\).&nbsp;</p>\n<p>(d) Complex exponentials can be used directly in place of the trigonometrical formula.\n\\[\\int \\cos(\\theta)\\sin(\\theta) \\mathrm{d}\\theta\n = \\int \\frac{1}{2}\\left( e^{i\\theta}+e^{-i\\theta} \\right)\n\\frac{1}{2i}\\left( e^{i\\theta}-e^{-i\\theta} \\right)\n\\mathrm{d}\\theta\\\\\n = \\frac{1}{4i} \\int e^{2i\\theta}-e^{-2i\\theta} \\mathrm{d}\\theta\n = -\\frac{1}{8}\\left( e^{i2\\theta}+e^{-i2\\theta} \\right) +c'''.\n\\]\nIt is standard practice to rewrite the answer in the form given in the statement of the question, we should transform this using \\[ \\cos(\\theta) = \\frac{1}{2}\\left( e^{i\\theta}+e^{-i\\theta} \\right)\\] back into a final answer of\n\\( -\\frac{1}{4}\\cos(2\\theta)+c'''\\).</p>]]></text>\n    </generalfeedback>\n    <defaultgrade>1.0000000</defaultgrade>\n    <penalty>0.1000000</penalty>\n    <hidden>0</hidden>\n    <questionvariables>\n      <text><![CDATA[p:sin(x)*cos(x);\nta1:[[a,true,\"(a) trig substitutions first\"],[b,true,\"(b) parts\"],[c,true,\"(c) substitution\"],[d,true,\"(d) replace with complex exponentials\"],[e,false,\"(e) none of these methods\"]]\nta2:int(sin(x)*cos(x),x)]]></text>\n    </questionvariables>\n    <specificfeedback format=\"html\">\n      <text></text>\n    </specificfeedback>\n    <questionnote>\n      <text></text>\n    </questionnote>\n    <questionsimplify>1</questionsimplify>\n    <assumepositive>0</assumepositive>\n    <prtcorrect format=\"html\">\n      <text>Correct answer, well done.</text>\n    </prtcorrect>\n    <prtpartiallycorrect format=\"html\">\n      <text>Your answer is partially correct.</text>\n    </prtpartiallycorrect>\n    <prtincorrect format=\"html\">\n      <text>Incorrect answer.</text>\n    </prtincorrect>\n    <multiplicationsign>dot</multiplicationsign>\n    <sqrtsign>1</sqrtsign>\n    <complexno>i</complexno>\n    <inversetrig>cos-1</inversetrig>\n    <matrixparens>[</matrixparens>\n    <variantsselectionseed></variantsselectionseed>\n    <input>\n      <name>ans1</name>\n      <type>checkbox</type>\n      <tans>ta1</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <allowwords></allowwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>0</requirelowestterms>\n      <checkanswertype>0</checkanswertype>\n      <mustverify>0</mustverify>\n      <showvalidation>2</showvalidation>\n      <options></options>\n    </input>\n    <input>\n      <name>ans2</name>\n      <type>algebraic</type>\n      <tans>ta2</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <allowwords></allowwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>0</requirelowestterms>\n      <checkanswertype>0</checkanswertype>\n      <mustverify>1</mustverify>\n      <showvalidation>1</showvalidation>\n      <options></options>\n    </input>\n    <prt>\n      <name>prt1</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text></text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>member(e,ans1)</sans>\n        <tans>true</tans>\n        <testoptions></testoptions>\n        <quiet>1</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>0.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>prt1-1-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text>At least one of these options can work. Indeed, any of these methods work.</text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>1</falsenextnode>\n        <falseanswernote>prt1-1-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>1</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>setify(ans1)</sans>\n        <tans>{a,b,c,d}</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>1.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>prt1-2-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.5000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>prt1-2-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Actually, any of these methods can be made to work.</p>]]></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <prt>\n      <name>prt2</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text></text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>Int</answertest>\n        <sans>ans2</sans>\n        <tans>ta2</tans>\n        <testoptions>x</testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>1.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>prt2-1-T</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>prt2-1-F</falseanswernote>\n        <falsefeedback format=\"html\">\n          <text></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <qtest>\n      <testcase>1</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>[a,b,c,d]</value>\n      </testinput>\n      <testinput>\n        <name>ans2</name>\n        <value>ta2+c</value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>prt1-2-T</expectedanswernote>\n      </expected>\n      <expected>\n        <name>prt2</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>prt2-1-T</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>2</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>[e]</value>\n      </testinput>\n      <testinput>\n        <name>ans2</name>\n        <value></value>\n      </testinput>\n      <expected>\n        <name>prt1</name>\n        <expectedscore>0.0000000</expectedscore>\n        <expectedpenalty>0.1000000</expectedpenalty>\n        <expectedanswernote>prt1-1-T</expectedanswernote>\n      </expected>\n      <expected>\n        <name>prt2</name>\n        <expectedscore></expectedscore>\n        <expectedpenalty></expectedpenalty>\n        <expectedanswernote>NULL</expectedanswernote>\n      </expected>\n    </qtest>\n  </question>\n\n</quiz>",
   "points": "1",
   "learningObjectives": "",
   "oneTimeTest": false
  }
 },
 {
  "type": "math-stack",
  "taskId": "math-stack-3064781267",
  "source": {
   "name": "Question 4",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "question": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quiz>\n<!-- question: 105  -->\n  <question type=\"stack\">\n    <name>\n      <text>Odd and even functions</text>\n    </name>\n    <questiontext format=\"html\">\n      <text><![CDATA[<p>1. Give an example of an odd function by typing an expression which represents it. $f_1(x)=$ [[input:ans1]]. [[validation:ans1]] [[feedback:odd]]</p>\n<p>2. Give an example of an even function. $f_2(x)=$ [[input:ans2]]. [[validation:ans2]] [[feedback:even]]</p>\n<p>3. Give an example of a function which is odd and even. $f_3(x)=$ [[input:ans3]]. [[validation:ans3]] [[feedback:oddeven]]</p>\n<p>4. Is the answer to 3. unique? [[input:ans4]] (Or are there many different possibilities.) [[validation:ans4]] [[feedback:unique]]</p>]]></text>\n    </questiontext>\n    <generalfeedback format=\"html\">\n      <text></text>\n    </generalfeedback>\n    <defaultgrade>1.0000000</defaultgrade>\n    <penalty>0.3333333</penalty>\n    <hidden>0</hidden>\n    <questionvariables>\n      <text></text>\n    </questionvariables>\n    <specificfeedback format=\"html\">\n      <text></text>\n    </specificfeedback>\n    <questionnote>\n      <text></text>\n    </questionnote>\n    <questionsimplify>1</questionsimplify>\n    <assumepositive>0</assumepositive>\n    <prtcorrect format=\"html\">\n      <text><![CDATA[<p><span class=\"correct\">Correct answer, well done.</span></p>]]></text>\n    </prtcorrect>\n    <prtpartiallycorrect format=\"html\">\n      <text><![CDATA[<p><span class=\"incorrect\">Your answer is partially correct.</span></p>]]></text>\n    </prtpartiallycorrect>\n    <prtincorrect format=\"html\">\n      <text><![CDATA[<p><span class=\"partially\">Incorrect answer.</span></p>]]></text>\n    </prtincorrect>\n    <multiplicationsign>dot</multiplicationsign>\n    <sqrtsign>1</sqrtsign>\n    <complexno>i</complexno>\n    <variantsselectionseed></variantsselectionseed>\n    <input>\n      <name>ans1</name>\n      <type>algebraic</type>\n      <tans>x^3</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>1</requirelowestterms>\n      <checkanswertype>1</checkanswertype>\n      <mustverify>1</mustverify>\n      <showvalidation>1</showvalidation>\n    </input>\n    <input>\n      <name>ans2</name>\n      <type>algebraic</type>\n      <tans>x^4</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>1</requirelowestterms>\n      <checkanswertype>1</checkanswertype>\n      <mustverify>1</mustverify>\n      <showvalidation>1</showvalidation>\n    </input>\n    <input>\n      <name>ans3</name>\n      <type>algebraic</type>\n      <tans>0</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>1</requirelowestterms>\n      <checkanswertype>1</checkanswertype>\n      <mustverify>1</mustverify>\n      <showvalidation>1</showvalidation>\n    </input>\n    <input>\n      <name>ans4</name>\n      <type>boolean</type>\n      <tans>true</tans>\n      <boxsize>15</boxsize>\n      <strictsyntax>1</strictsyntax>\n      <insertstars>0</insertstars>\n      <syntaxhint></syntaxhint>\n      <forbidwords></forbidwords>\n      <forbidfloat>1</forbidfloat>\n      <requirelowestterms>1</requirelowestterms>\n      <checkanswertype>1</checkanswertype>\n      <mustverify>1</mustverify>\n      <showvalidation>1</showvalidation>\n    </input>\n    <prt>\n      <name>even</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text>sa:ans2-subst(x=-x,ans2);</text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>sa</sans>\n        <tans>0</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>1.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>even-0-T </trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>even-0-F </falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer is not an even function. Look, \\[ f(x)-f(-x)=@sa@ \\neq 0.\\]</p>]]></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <prt>\n      <name>odd</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text>sa:subst(x=-x,ans1)+ans1;</text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>sa</sans>\n        <tans>0</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>1.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>odd-0-T </trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>odd-0-F </falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer is not an odd function. Look, \\[ f(x)+f(-x)=@sa@ \\neq 0.\\]</p>]]></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <prt>\n      <name>oddeven</name>\n      <value>2.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text>sa1:subst(x=-x,ans3)+ans3;\nsa2:ans3-subst(x=-x,ans3);</text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>sa1</sans>\n        <tans>0</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>0.5000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>1</truenextnode>\n        <trueanswernote>ODD</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>1</falsenextnode>\n        <falseanswernote>oddeven-0-F </falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer is not an odd function. Look, \\[ f(x)+f(-x)=@sa1@ \\neq 0.\\]</p>]]></text>\n        </falsefeedback>\n      </node>\n      <node>\n        <name>1</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>sa2</sans>\n        <tans>0</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>+</truescoremode>\n        <truescore>0.5000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>EVEN</trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>+</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>oddeven-1-F </falseanswernote>\n        <falsefeedback format=\"html\">\n          <text><![CDATA[<p>Your answer is not an even function. Look, \\[ f(x)-f(-x)=@sa2@ \\neq 0.\\]</p>]]></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <prt>\n      <name>unique</name>\n      <value>1.0000000</value>\n      <autosimplify>1</autosimplify>\n      <feedbackvariables>\n        <text></text>\n      </feedbackvariables>\n      <node>\n        <name>0</name>\n        <answertest>AlgEquiv</answertest>\n        <sans>ans4</sans>\n        <tans>true</tans>\n        <testoptions></testoptions>\n        <quiet>0</quiet>\n        <truescoremode>=</truescoremode>\n        <truescore>1.0000000</truescore>\n        <truepenalty></truepenalty>\n        <truenextnode>-1</truenextnode>\n        <trueanswernote>unique-0-T </trueanswernote>\n        <truefeedback format=\"html\">\n          <text></text>\n        </truefeedback>\n        <falsescoremode>=</falsescoremode>\n        <falsescore>0.0000000</falsescore>\n        <falsepenalty></falsepenalty>\n        <falsenextnode>-1</falsenextnode>\n        <falseanswernote>unique-0-F </falseanswernote>\n        <falsefeedback format=\"html\">\n          <text></text>\n        </falsefeedback>\n      </node>\n    </prt>\n    <qtest>\n      <testcase>1</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>x^3</value>\n      </testinput>\n      <testinput>\n        <name>ans2</name>\n        <value>cos(x)</value>\n      </testinput>\n      <testinput>\n        <name>ans3</name>\n        <value>0</value>\n      </testinput>\n      <testinput>\n        <name>ans4</name>\n        <value>true</value>\n      </testinput>\n      <expected>\n        <name>even</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>even-0-T</expectedanswernote>\n      </expected>\n      <expected>\n        <name>odd</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>odd-0-T</expectedanswernote>\n      </expected>\n      <expected>\n        <name>oddeven</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>EVEN</expectedanswernote>\n      </expected>\n      <expected>\n        <name>unique</name>\n        <expectedscore>1.0000000</expectedscore>\n        <expectedpenalty>0.0000000</expectedpenalty>\n        <expectedanswernote>unique-0-T</expectedanswernote>\n      </expected>\n    </qtest>\n    <qtest>\n      <testcase>2</testcase>\n      <testinput>\n        <name>ans1</name>\n        <value>x^2</value>\n      </testinput>\n      <testinput>\n        <name>ans2</name>\n        <value>x^3</value>\n      </testinput>\n      <testinput>\n        <name>ans3</name>\n        <value>x^3</value>\n      </testinput>\n      <testinput>\n        <name>ans4</name>\n        <value>false</value>\n      </testinput>\n      <expected>\n        <name>even</name>\n        <expectedscore>0.0000000</expectedscore>\n        <expectedpenalty>0.3333333</expectedpenalty>\n        <expectedanswernote>even-0-F</expectedanswernote>\n      </expected>\n      <expected>\n        <name>odd</name>\n        <expectedscore>0.0000000</expectedscore>\n        <expectedpenalty>0.3333333</expectedpenalty>\n        <expectedanswernote>odd-0-F</expectedanswernote>\n      </expected>\n      <expected>\n        <name>oddeven</name>\n        <expectedscore>0.5000000</expectedscore>\n        <expectedpenalty>0.3333333</expectedpenalty>\n        <expectedanswernote>oddeven-1-F</expectedanswernote>\n      </expected>\n      <expected>\n        <name>unique</name>\n        <expectedscore>0.0000000</expectedscore>\n        <expectedpenalty>0.3333333</expectedpenalty>\n        <expectedanswernote>unique-0-F</expectedanswernote>\n      </expected>\n    </qtest>\n  </question>\n\n</quiz>\n",
   "points": "1",
   "learningObjectives": "",
   "oneTimeTest": false
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2111061264",
  "source": {
   "name": "Line Based Grader",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Drag the following blocks into the designated area so that the code outputs \"Hello World!\"",
   "points": "1",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "print(\"Hello\")\nprint(\" \")\nprint(\"World\")\nprint(\"!\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"feedback_cb\": \"displayErrors\",\n  \"can_indent\": false\n}",
   "grader": "1"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1975006843",
  "source": {
   "name": "Turtle Triangle",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Re order the commands so that the turtle draws a triangle",
   "points": "1",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "forward(100)\nleft(120)\nforward(100)\nleft(120)\nforward(100)\nleft(120)",
   "options": "{}",
   "grader": "5"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1061393720",
  "source": {
   "name": "line based grader",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "ANSWER AND RATIONALE TO STUDENT",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "<p>Construct a function by drag&amp;dropping and reordering lines from the\n            left to the right.\n            The constructed function should return True if the parameter is True and\n            return False otherwise.</p>\n        <p><strong>Note:</strong> The correct solution is obviously a dumb way to do\n            it. This exercise is merely trying to give an example of a Parson's\n            puzzle with js-parsons, not teach you Python :)</p>",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "def is_true(boolean_value):\n  if boolean_value:\n    return True\n  return False\n  return true #distractor\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1\n}",
   "grader": "1"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3617679223",
  "source": {
   "name": "Turtle Graphics Grader",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "ANSWER AND RATIONALE TO STUDENT",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct a program by drag&amp;dropping and reordering lines from the\n            left to the right.\n            The constructed program should draw a triangle like shown below.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "REPEAT 3 TIMES\n  forward(100)\n  left(120)\nENDREPEAT\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"modelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\",\n  \"executable_code\": \"for i in range(0,3):\\nmyTurtle.forward(100)\\nmyTurtle.left(120)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2451163072",
  "source": {
   "name": "line based grader without indentation",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "ANSWER AND RATIONALE TO STUDENT",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct a program that prints Hello Parsons problems!",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "print 'Hello'\nprint 'Parsons'\nprint 'problems!'",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"trashId\": \"sortableTrash\",\n                \"max_wrong_lines\": 1,\n                \"feedback_cb\" : \"displayErrors\",\n                \"can_indent\": false\n            }",
   "grader": "1"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2025388301",
  "source": {
   "name": "Language Translation Grader",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "ANSWER AND RATIONALE TO STUDENT",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct code by reordering and indenting the lines.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "for (int i=0;i<3;i++) {\nSystem.out.print(\\\"I \\\");\nSystem.out.print(\\\"am \\\");\nSystem.out.print(\\\"a Java program \\\");\n}",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"max_wrong_lines\": 1,\n                \"vartests\": [{\"initcode\": \"output = ''\", \"code\": \"\", \"message\": \"Testing...\", \"variables\": {\"output\": \"I am a Java program I am a Java program I am a Java program \"}}\n                    ],\n                \"executable_code\": \"for x in range(3):\\noutput += 'I '\\noutput += 'am '\\noutput += 'a Java program '\\npass\\n\",\n                \"programmingLang\": \"java\"\n            }",
   "grader": "4"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3785944520",
  "source": {
   "name": "language translation grader 2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "ANSWER AND RATIONALE TO STUDENT",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct a function by drag&amp;dropping and reordering lines from the\n            left to the right.\n            The constructed function should set the value of variable min to be the smaller of variables a and b.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "IF $$toggle::a::b$$ $$toggle::<::>::<>$$ b THEN\n  min := a\nELSE\n  min := b\nENDIF",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"trashId\": \"sortableTrash\",\n                \"max_wrong_lines\": 1,\n                \"vartests\": [{\"initcode\": \"min = None\\na = 0\\nb = 2\", \"code\": \"\", \"message\": \"Testing with a = 0 ja b = 2\", \"variables\": {\"min\": 0}},\n                    {\"initcode\": \"min = None\\na = 7\\nb = 4\\n\", \"code\": \"\", \"message\": \"Testing with a = 7 ja b = 4\",\n                      \"variables\": {\"min\": 4}}],\n                \"executable_code\": \"if $$toggle$$ $$toggle::<::>::!=$$ b:\\nmin = a\\nelse:\\nmin = b\\n  pass\",\n                \"programmingLang\": \"pseudo\"\n            }",
   "grader": "4"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4227875760",
  "source": {
   "name": "unit tests grader 1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "ANSWER AND RATIONALE TO STUDENT",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct a function which returns the largest of the three given arguments.\n      You can change the value of a toggleable element (<span class=\"jsparson-toggle\"></span>) by clicking.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "def find_largest(a, b, c):\nif <span class='jsparson-toggle' data-type='abc'></span> > <span class='jsparson-toggle' data-type='abc'></span>:\nif <span class='jsparson-toggle' data-type='abc'></span> > <span class='jsparson-toggle' data-type='abc'></span>:\nreturn <span class='jsparson-toggle' data-type='abc'></span>\nelse:\nreturn <span class='jsparson-toggle' data-type='abc'></span>\nelif <span class='jsparson-toggle' data-type='abc'></span> > <span class='jsparson-toggle' data-type='abc'></span>:\nreturn <span class='jsparson-toggle' data-type='abc'></span>\nelse:\nreturn <span class='jsparson-toggle' data-type='abc'></span>\n",
   "options": "{\n                \"sortableId\": \"sortable\",\n                        \"trashId\": \"sortableTrash\",\n                        \"unittests\": \"import unittestparson\\nclass myTests(unittestparson.unittest):\\n  def testOne(self):\\n    self.assertEqual(find_largest(0, 2, 4),4,\\\"Calling function <code>find_largest(0, 2, 4)</code>.\\\")\\n    self.assertEqual(find_largest(4, 2, 4),4,\\\"Calling function <code>find_largest(4, 2, 4)</code>.\\\")\\n    self.assertEqual(find_largest(-5, -1, -4),-1,\\\"Calling function <code>find_largest(-5, -1, -4)</code>.\\\")\\n    self.assertEqual(find_largest(7, 2, 4),7,\\\"Calling function <code>find_largest(7, 2, 4)</code>.\\\")\\n_test_result = myTests().main()\",\n                        \"toggleTypeHandlers\": {\"abc\": [\"a\", \"b\", \"c\"]}\n            }",
   "grader": "3"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2614592583",
  "source": {
   "name": "Variable Check Grader",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "ANSWER AND RATIONALE TO STUDENT",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct a program that swaps the values of variables <code>x</code> and <code>y</code> using the\n  helper variable <code>tmp</code>. You can change the names of the variables (<span class=\"jsparson-toggle\"></span>)\n  by clicking them.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "$$toggle::x::y::tmp$$ = $$toggle::x::y::tmp$$\n$$toggle::x::y::tmp$$ = $$toggle::x::y::tmp$$\n$$toggle::x::y::tmp$$ = $$toggle::x::y::tmp$$\n",
   "options": "{\n      \"sortableId\": \"sortable\",\n      \"trashId\": \"sortableTrash\",\n      \"vartests\": [{\"initcode\": \"x = 0\\ny=2\", \"code\": \"\", \"message\": \"Testing with initial variable values x = 0 and y = 2\", \"variables\": {\"x\": 2}},\n                   {\"initcode\": \"x = 3\\ny=4\\n\", \"code\": \"\", \"message\": \"Testing with initial variable values x = 3 and y = 4\", \"variables\": {\"x\": 4, \"y\": 3}}],\n      \"lang\": \"en\"\n    }",
   "grader": "2"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4136203886",
  "source": {
   "name": "Unit Tests Grader",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Your task is to construct a function which returns the index of the largest\n      element in the array.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "def maxindex(arg):\n ans = 0\n for i in range(len(arg)):\n if arg[i] > arg[ans]:\n ans = i\n while True:\npass\n return ans\n",
   "options": "{\n                  \"sortableId\": \"sortable\",\n                  \"trashId\": \"sortableTrash\",\n                  \"unittests\": \"import unittestparson\\nclass myTests(unittestparson.unittest):\\n  def testOne(self):\\n    self.assertEqual(maxindex([0, 2, 4]),2,\\\"Calling function <code>maxindex([0, 2, 4])</code>.\\\")\\n    self.assertEqual(maxindex([7, 2, 4]),0,\\\"Calling function <code>maxindex([7, 2, 4])</code>.\\\")\\n    self.assertEqual(maxindex([7, 8, 4]),1,\\\"Calling function <code>maxindex([7, 8, 4])</code>.\\\")\\n  def testTwo(self):\\n    self.assertEqual(maxindex([0, 2, 4]),2,\\\"Calling function <code>maxindex([0, 2, 4])</code>.\\\")\\n    self.assertEqual(maxindex([7, 2, 4]),0,\\\"Calling function <code>maxindex([7, 2, 4])</code>.\\\")\\n    self.assertEqual(maxindex([7, 8, 4]),1,\\\"Calling function <code>maxindex([7, 8, 4])</code>.\\\")\\n_test_result = myTests().main()\"\n      }",
   "grader": "3"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3698586264",
  "source": {
   "name": "turtle 2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "test",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "REPEAT 4 TIMES\n  forward(50)\n  left(90)\nENDREPEAT\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"modelTurtle.forward(50)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(90)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(90)\",\n  \"executable_code\": \"for i in range(0,4):\\nmyTurtle.forward(50)\\nmyTurtle.left(90)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-23456077",
  "source": {
   "name": "turtle 3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "test",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "REPEAT 6 TIMES\n  forward(50)\n  left(60)\nENDREPEAT\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"modelTurtle.forward(50)\\nmodelTurtle.left(60)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(60)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(60)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(60)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(60)\\nmodelTurtle.forward(50)\\nmodelTurtle.left(60)\",\n  \"executable_code\": \"for i in range(0,6):\\nmyTurtle.forward(50)\\nmyTurtle.left(60)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3464569959",
  "source": {
   "name": "linebased3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "test\n\n",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "1\n22\n333\n4444\n55555",
   "options": "{ \n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"feedback_cb\" : \"displayErrors\",\n  \"can_indent\": false\n  \n  \n}",
   "grader": "1"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2637734413",
  "source": {
   "name": "linebased 4",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "test",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "0 indents\n 1 indent\n  2 indents\n   3 indents\n    4  indents\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1\n}",
   "grader": "1"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4105711196",
  "source": {
   "name": "variable 2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct a program that swaps the values of variables <code>x</code> and <code>y</code> using the\n  helper variable <code>z</code>. You can change the names of the variables (<span class=\"jsparson-toggle\"></span>)\n  by clicking them.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "$$toggle::x::y::z$$ = $$toggle::x::y::z$$ + $$toggle::x::y::z$$\n$$toggle::x::y::z$$ = $$toggle::x::y::z$$ - $$toggle::x::y::z$$\n$$toggle::x::y::z$$ = $$toggle::x::y::z$$ -$$toggle::x::y::z$$\n",
   "options": "{\n      \"sortableId\": \"sortable\",\n      \"trashId\": \"sortableTrash\",\n      \"vartests\": [{\"initcode\": \"x = 1\\ny=2\", \"code\": \"\", \"message\": \"Testing with initial variable values x = 1 and y = 2\", \"variables\": {\"z\": 3, \"x\": 2, \"y\": 1}},\n                   {\"initcode\": \"x = 3\\ny=4\\n\", \"code\": \"\", \"message\": \"Testing with initial variable values x = 3 and y = 4\", \"variables\": {\"z\": 7, \"x\": 4, \"y\": 3}}],\n      \"lang\": \"en\"\n    }",
   "grader": "2"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1813902282",
  "source": {
   "name": "language translation grader 3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "test",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "for (int i=0;i<3;i++) {\nSystem.out.print(\\\"111 \\\");\nSystem.out.print(\\\"222 \\\");\nSystem.out.print(\\\"333 \\\");\n}",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"max_wrong_lines\": 1,\n                \"vartests\": [{\"initcode\": \"output = ''\", \"code\": \"\", \"message\": \"Testing...\", \"variables\": {\"output\": \"111 222 333 111 222 333 111 222 333 \"}}\n                    ],\n                \"executable_code\": \"for x in range(3):\\noutput += '111 '\\noutput += '222 '\\noutput += '333 '\\npass\\n\",\n                \"programmingLang\": \"java\"\n            }",
   "grader": "4"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1712466135",
  "source": {
   "name": "language translation grader 4",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "instructions": "Construct a function by drag&amp;dropping and reordering lines from the left to the right. \nThe constructed function should set the value of variable sum of variables a and b.",
   "points": "10",
   "learningObjectives": "",
   "oneTimeTest": false,
   "initial": "IF $$toggle::a::b$$ $$toggle::<::>$$ $$toggle::a::b$$ THEN\n  sum:= a - b\nELSE\n  sum:= a + b\nENDIF",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"trashId\": \"sortableTrash\",\n                \"max_wrong_lines\": 1,\n                \"vartests\": [{\"initcode\": \"min = None\\na = 0\\nb = 2\", \"code\": \"\", \"message\": \"Testing with a = 0 ja b = 2\", \"variables\": {\"sum\": 2}},\n                    {\"initcode\": \"min = None\\na = 7\\nb = 4\\n\", \"code\": \"\", \"message\": \"Testing with a = 7 ja b = 4\",\n                      \"variables\": {\"sum\": 3}}],\n                \"executable_code\": \"if $$toggle$$ $$toggle::<::>$$ b:\\nsum = a - b\\nelse:\\nsum = a + b\\n  pass\",\n                \"programmingLang\": \"pseudo\"\n            }",
   "grader": "4"
  }
 }
]